import { useState, useEffect, useCallback } from 'react'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import { FileUploader } from 'react-drag-drop-files'
import styles from '../styles/Home.module.css'

const AnalysisView = dynamic(() => { return import('../components/_analysisView') }, { ssr: false })
const PdfView = dynamic(() => { return import('../components/_pdfView') }, { ssr: false })
const JsonView = dynamic(() => { return import('../components/_jsonView') }, { ssr: false })


export default function Home() {
  // maxW = 0, maxH = 0, pages = 0, json = [], font
  const [pages, setPages] = useState(0)

  const [tab, setSelectedTab] = useState(0)
  const [pdf, setPdf] = useState(null)
  const handlePdfChange = (file) => {
    setPdf(file)
  }

  const [json, setJson] = useState(null)
  const handleJsonChange = (file) => {
    file.arrayBuffer().then(res => {
      const data = JSON.parse(Buffer.from(res).toString())
      setJson(data)
    })
  }

  const [dimensions, setDimensions] = useState({ maxW: 0, maxH: 0 })
  const handleDimensionsChange = (_dimensions) => {
    setDimensions(_dimensions)
  }

  const [fonts, setFonts] = useState({ maxW: 0, maxH: 0 })
  const handleFontsChange = (_fonts) => {
    setFonts(_fonts)
  }

  useEffect(() => {
    if (!tab && pdf) setSelectedTab(1)
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pdf])
  

  function onDocumentLoadSuccess({ numPages }) {
    setPages(numPages)
  }

  const PDFViewReady = useCallback(() => {
    return pdf
      ? <PdfView
        onDocumentLoadSuccess={onDocumentLoadSuccess}
        file={pdf}
        pages={pages}
        setDimensions={handleDimensionsChange}
        setFonts={handleFontsChange}/>
      : null
  }, [pdf, pages])

  const JsonViewReady = useCallback(() => {
    return json
      ? <JsonView json={json}/>
      : null
  }, [json])

  const AnalysisViewReady = useCallback(() => {
    return  json && pdf
      ? <AnalysisView pages={pages} json={json} fonts={fonts} dimensions={dimensions}/>
      : null
  }, [dimensions, fonts, json, pages, pdf])

  return (
    <div className={styles.container}>
      <Head>
        <title>Pdf Rebuilder</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.droppers}>
          <div>
            <FileUploader handleChange={handlePdfChange} label="Upload the PDF file" name="_pdf_" types={['PDF']} />
          </div>
          <div>
            <FileUploader handleChange={handleJsonChange} label="Upload the JSON file" name="_json_" types={['JSON']} />
          </div>
        </div>
        <div className={styles.tab}>
          <button type="button" onClick={() => setSelectedTab(1)} disabled={!pdf}>PDF</button>
          <button type="button" onClick={() => setSelectedTab(2)} disabled={!json}>Json</button>
          <button type="button" onClick={() => setSelectedTab(3)} disabled={!pages || !pdf || !json}>Rebuilder</button>
        </div>
        {
          tab === 1
            ? <PDFViewReady />
            : tab === 2
              ? <JsonViewReady />
              : tab === 3 ? <AnalysisViewReady /> : null
        }
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}
